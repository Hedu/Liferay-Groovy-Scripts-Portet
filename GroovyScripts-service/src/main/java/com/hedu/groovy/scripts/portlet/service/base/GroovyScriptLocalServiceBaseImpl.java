/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.hedu.groovy.scripts.portlet.service.base;

import aQute.bnd.annotation.ProviderType;

import com.hedu.groovy.scripts.portlet.model.GroovyScript;
import com.hedu.groovy.scripts.portlet.service.GroovyScriptLocalService;
import com.hedu.groovy.scripts.portlet.service.persistence.GroovyScriptFinder;
import com.hedu.groovy.scripts.portlet.service.persistence.GroovyScriptPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the groovy script local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.hedu.groovy.scripts.portlet.service.impl.GroovyScriptLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.hedu.groovy.scripts.portlet.service.impl.GroovyScriptLocalServiceImpl
 * @see com.hedu.groovy.scripts.portlet.service.GroovyScriptLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class GroovyScriptLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements GroovyScriptLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.hedu.groovy.scripts.portlet.service.GroovyScriptLocalServiceUtil} to access the groovy script local service.
	 */

	/**
	 * Adds the groovy script to the database. Also notifies the appropriate model listeners.
	 *
	 * @param groovyScript the groovy script
	 * @return the groovy script that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public GroovyScript addGroovyScript(GroovyScript groovyScript) {
		groovyScript.setNew(true);

		return groovyScriptPersistence.update(groovyScript);
	}

	/**
	 * Creates a new groovy script with the primary key. Does not add the groovy script to the database.
	 *
	 * @param groovyScriptId the primary key for the new groovy script
	 * @return the new groovy script
	 */
	@Override
	public GroovyScript createGroovyScript(long groovyScriptId) {
		return groovyScriptPersistence.create(groovyScriptId);
	}

	/**
	 * Deletes the groovy script with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param groovyScriptId the primary key of the groovy script
	 * @return the groovy script that was removed
	 * @throws PortalException if a groovy script with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public GroovyScript deleteGroovyScript(long groovyScriptId)
		throws PortalException {
		return groovyScriptPersistence.remove(groovyScriptId);
	}

	/**
	 * Deletes the groovy script from the database. Also notifies the appropriate model listeners.
	 *
	 * @param groovyScript the groovy script
	 * @return the groovy script that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public GroovyScript deleteGroovyScript(GroovyScript groovyScript) {
		return groovyScriptPersistence.remove(groovyScript);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(GroovyScript.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return groovyScriptPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.hedu.groovy.scripts.portlet.model.impl.GroovyScriptModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return groovyScriptPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.hedu.groovy.scripts.portlet.model.impl.GroovyScriptModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return groovyScriptPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return groovyScriptPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return groovyScriptPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public GroovyScript fetchGroovyScript(long groovyScriptId) {
		return groovyScriptPersistence.fetchByPrimaryKey(groovyScriptId);
	}

	/**
	 * Returns the groovy script with the matching UUID and company.
	 *
	 * @param uuid the groovy script's UUID
	 * @param companyId the primary key of the company
	 * @return the matching groovy script, or <code>null</code> if a matching groovy script could not be found
	 */
	@Override
	public GroovyScript fetchGroovyScriptByUuidAndCompanyId(String uuid,
		long companyId) {
		return groovyScriptPersistence.fetchByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the groovy script with the primary key.
	 *
	 * @param groovyScriptId the primary key of the groovy script
	 * @return the groovy script
	 * @throws PortalException if a groovy script with the primary key could not be found
	 */
	@Override
	public GroovyScript getGroovyScript(long groovyScriptId)
		throws PortalException {
		return groovyScriptPersistence.findByPrimaryKey(groovyScriptId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(groovyScriptLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(GroovyScript.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("groovyScriptId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(groovyScriptLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(GroovyScript.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"groovyScriptId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(groovyScriptLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(GroovyScript.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("groovyScriptId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<GroovyScript>() {
				@Override
				public void performAction(GroovyScript groovyScript)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						groovyScript);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(GroovyScript.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return groovyScriptLocalService.deleteGroovyScript((GroovyScript)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return groovyScriptPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the groovy script with the matching UUID and company.
	 *
	 * @param uuid the groovy script's UUID
	 * @param companyId the primary key of the company
	 * @return the matching groovy script
	 * @throws PortalException if a matching groovy script could not be found
	 */
	@Override
	public GroovyScript getGroovyScriptByUuidAndCompanyId(String uuid,
		long companyId) throws PortalException {
		return groovyScriptPersistence.findByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns a range of all the groovy scripts.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.hedu.groovy.scripts.portlet.model.impl.GroovyScriptModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of groovy scripts
	 * @param end the upper bound of the range of groovy scripts (not inclusive)
	 * @return the range of groovy scripts
	 */
	@Override
	public List<GroovyScript> getGroovyScripts(int start, int end) {
		return groovyScriptPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of groovy scripts.
	 *
	 * @return the number of groovy scripts
	 */
	@Override
	public int getGroovyScriptsCount() {
		return groovyScriptPersistence.countAll();
	}

	/**
	 * Updates the groovy script in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param groovyScript the groovy script
	 * @return the groovy script that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public GroovyScript updateGroovyScript(GroovyScript groovyScript) {
		return groovyScriptPersistence.update(groovyScript);
	}

	/**
	 * Returns the groovy script local service.
	 *
	 * @return the groovy script local service
	 */
	public GroovyScriptLocalService getGroovyScriptLocalService() {
		return groovyScriptLocalService;
	}

	/**
	 * Sets the groovy script local service.
	 *
	 * @param groovyScriptLocalService the groovy script local service
	 */
	public void setGroovyScriptLocalService(
		GroovyScriptLocalService groovyScriptLocalService) {
		this.groovyScriptLocalService = groovyScriptLocalService;
	}

	/**
	 * Returns the groovy script persistence.
	 *
	 * @return the groovy script persistence
	 */
	public GroovyScriptPersistence getGroovyScriptPersistence() {
		return groovyScriptPersistence;
	}

	/**
	 * Sets the groovy script persistence.
	 *
	 * @param groovyScriptPersistence the groovy script persistence
	 */
	public void setGroovyScriptPersistence(
		GroovyScriptPersistence groovyScriptPersistence) {
		this.groovyScriptPersistence = groovyScriptPersistence;
	}

	/**
	 * Returns the groovy script finder.
	 *
	 * @return the groovy script finder
	 */
	public GroovyScriptFinder getGroovyScriptFinder() {
		return groovyScriptFinder;
	}

	/**
	 * Sets the groovy script finder.
	 *
	 * @param groovyScriptFinder the groovy script finder
	 */
	public void setGroovyScriptFinder(GroovyScriptFinder groovyScriptFinder) {
		this.groovyScriptFinder = groovyScriptFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.hedu.groovy.scripts.portlet.model.GroovyScript",
			groovyScriptLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.hedu.groovy.scripts.portlet.model.GroovyScript");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return GroovyScriptLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return GroovyScript.class;
	}

	protected String getModelClassName() {
		return GroovyScript.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = groovyScriptPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = GroovyScriptLocalService.class)
	protected GroovyScriptLocalService groovyScriptLocalService;
	@BeanReference(type = GroovyScriptPersistence.class)
	protected GroovyScriptPersistence groovyScriptPersistence;
	@BeanReference(type = GroovyScriptFinder.class)
	protected GroovyScriptFinder groovyScriptFinder;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}