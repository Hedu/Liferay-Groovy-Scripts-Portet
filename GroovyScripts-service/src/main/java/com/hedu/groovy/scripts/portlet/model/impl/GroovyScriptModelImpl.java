/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.hedu.groovy.scripts.portlet.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.hedu.groovy.scripts.portlet.model.GroovyScript;
import com.hedu.groovy.scripts.portlet.model.GroovyScriptModel;
import com.hedu.groovy.scripts.portlet.model.GroovyScriptSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the GroovyScript service. Represents a row in the &quot;GROOVY_SCRIPTS_GroovyScript&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link GroovyScriptModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GroovyScriptImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GroovyScriptImpl
 * @see GroovyScript
 * @see GroovyScriptModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class GroovyScriptModelImpl extends BaseModelImpl<GroovyScript>
	implements GroovyScriptModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a groovy script model instance should use the {@link GroovyScript} interface instead.
	 */
	public static final String TABLE_NAME = "GROOVY_SCRIPTS_GroovyScript";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "groovyScriptId", Types.BIGINT },
			{ "scriptId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "content", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groovyScriptId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("scriptId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table GROOVY_SCRIPTS_GroovyScript (uuid_ VARCHAR(75) null,groovyScriptId LONG not null primary key,scriptId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,content VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table GROOVY_SCRIPTS_GroovyScript";
	public static final String ORDER_BY_JPQL = " ORDER BY groovyScript.modifiedDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GROOVY_SCRIPTS_GroovyScript.modifiedDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.hedu.groovy.scripts.portlet.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.hedu.groovy.scripts.portlet.model.GroovyScript"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.hedu.groovy.scripts.portlet.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.hedu.groovy.scripts.portlet.model.GroovyScript"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.hedu.groovy.scripts.portlet.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.hedu.groovy.scripts.portlet.model.GroovyScript"),
			true);
	public static final long SCRIPTID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static GroovyScript toModel(GroovyScriptSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		GroovyScript model = new GroovyScriptImpl();

		model.setUuid(soapModel.getUuid());
		model.setGroovyScriptId(soapModel.getGroovyScriptId());
		model.setScriptId(soapModel.getScriptId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitle(soapModel.getTitle());
		model.setContent(soapModel.getContent());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<GroovyScript> toModels(GroovyScriptSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<GroovyScript> models = new ArrayList<GroovyScript>(soapModels.length);

		for (GroovyScriptSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.hedu.groovy.scripts.portlet.service.util.PropsUtil.get(
				"lock.expiration.time.com.hedu.groovy.scripts.portlet.model.GroovyScript"));

	public GroovyScriptModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _groovyScriptId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGroovyScriptId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _groovyScriptId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GroovyScript.class;
	}

	@Override
	public String getModelClassName() {
		return GroovyScript.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("groovyScriptId", getGroovyScriptId());
		attributes.put("scriptId", getScriptId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("title", getTitle());
		attributes.put("content", getContent());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long groovyScriptId = (Long)attributes.get("groovyScriptId");

		if (groovyScriptId != null) {
			setGroovyScriptId(groovyScriptId);
		}

		Long scriptId = (Long)attributes.get("scriptId");

		if (scriptId != null) {
			setScriptId(scriptId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getGroovyScriptId() {
		return _groovyScriptId;
	}

	@Override
	public void setGroovyScriptId(long groovyScriptId) {
		_groovyScriptId = groovyScriptId;
	}

	@JSON
	@Override
	public long getScriptId() {
		return _scriptId;
	}

	@Override
	public void setScriptId(long scriptId) {
		_columnBitmask |= SCRIPTID_COLUMN_BITMASK;

		if (!_setOriginalScriptId) {
			_setOriginalScriptId = true;

			_originalScriptId = _scriptId;
		}

		_scriptId = scriptId;
	}

	public long getOriginalScriptId() {
		return _originalScriptId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GroovyScript.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GroovyScript toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GroovyScript)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GroovyScriptImpl groovyScriptImpl = new GroovyScriptImpl();

		groovyScriptImpl.setUuid(getUuid());
		groovyScriptImpl.setGroovyScriptId(getGroovyScriptId());
		groovyScriptImpl.setScriptId(getScriptId());
		groovyScriptImpl.setUserId(getUserId());
		groovyScriptImpl.setCreateDate(getCreateDate());
		groovyScriptImpl.setModifiedDate(getModifiedDate());
		groovyScriptImpl.setTitle(getTitle());
		groovyScriptImpl.setContent(getContent());

		groovyScriptImpl.resetOriginalValues();

		return groovyScriptImpl;
	}

	@Override
	public int compareTo(GroovyScript groovyScript) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				groovyScript.getModifiedDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GroovyScript)) {
			return false;
		}

		GroovyScript groovyScript = (GroovyScript)obj;

		long primaryKey = groovyScript.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		GroovyScriptModelImpl groovyScriptModelImpl = this;

		groovyScriptModelImpl._originalUuid = groovyScriptModelImpl._uuid;

		groovyScriptModelImpl._originalScriptId = groovyScriptModelImpl._scriptId;

		groovyScriptModelImpl._setOriginalScriptId = false;

		groovyScriptModelImpl._setModifiedDate = false;

		groovyScriptModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GroovyScript> toCacheModel() {
		GroovyScriptCacheModel groovyScriptCacheModel = new GroovyScriptCacheModel();

		groovyScriptCacheModel.uuid = getUuid();

		String uuid = groovyScriptCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			groovyScriptCacheModel.uuid = null;
		}

		groovyScriptCacheModel.groovyScriptId = getGroovyScriptId();

		groovyScriptCacheModel.scriptId = getScriptId();

		groovyScriptCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			groovyScriptCacheModel.createDate = createDate.getTime();
		}
		else {
			groovyScriptCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			groovyScriptCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			groovyScriptCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		groovyScriptCacheModel.title = getTitle();

		String title = groovyScriptCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			groovyScriptCacheModel.title = null;
		}

		groovyScriptCacheModel.content = getContent();

		String content = groovyScriptCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			groovyScriptCacheModel.content = null;
		}

		return groovyScriptCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", groovyScriptId=");
		sb.append(getGroovyScriptId());
		sb.append(", scriptId=");
		sb.append(getScriptId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", content=");
		sb.append(getContent());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.hedu.groovy.scripts.portlet.model.GroovyScript");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groovyScriptId</column-name><column-value><![CDATA[");
		sb.append(getGroovyScriptId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scriptId</column-name><column-value><![CDATA[");
		sb.append(getScriptId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = GroovyScript.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			GroovyScript.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _groovyScriptId;
	private long _scriptId;
	private long _originalScriptId;
	private boolean _setOriginalScriptId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _title;
	private String _content;
	private long _columnBitmask;
	private GroovyScript _escapedModel;
}